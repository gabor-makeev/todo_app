{"remainingRequest":"C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\src\\App.vue","mtime":1624823885643},{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBDb25zb2xlIGZyb20gJ0AvY29tcG9uZW50cy9Db25zb2xlJwppbXBvcnQgVG9kb1VJIGZyb20gJ0AvY29tcG9uZW50cy9Ub2RvVUknCmltcG9ydCBUb2RvIGZyb20gJ0AvY29tcG9uZW50cy9Ub2RvJwpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgQ29uc29sZSwKICAgIFRvZG9VSSwKICAgIFRvZG8KICB9LAogIGRhdGE6ICgpID0+ICh7CiAgICB0YXNrTGlzdDogW10sCiAgICBvcmlnaW5hbExpc3Q6IFtdLAogICAgY29uc29sZTogW10sCiAgICBjb25zb2xlSW5kZXg6IG51bGwsCiAgICB1bmlxdWVUYXNrczogMCwKICAgIEFQSV9VUkw6ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnCiAgfSksCiAgbW91bnRlZCAoKSB7CiAgICB0aGlzLmdldFRhc2tMaXN0KCkKICB9LAogIG1ldGhvZHM6IHsKICAgIC8vCiAgICAvLyBSZXF1ZXN0cyBTVEFSVAogICAgLy8KICAgIC8vIEdFVCBhbmQgUE9TVCByZXF1ZXN0cwogICAgLy8gdGhhdCBhcmUgcmVzcG9uc2libGUgZm9yIHRoZSBjb21tdW5pY2F0aW9uCiAgICAvLyBiZXR3ZWVuIEZyb250IGFuZCBCYWNrLWVuZAogICAgLy8gaW4gcGFydGljdWxhciwgdGhlIHRvZG8tYXBpL2RhdGFiYXNlL3Rhc2tMaXN0Lmpzb24gYW5kIHRhc2tMaXN0U2V0dXAuanNvbiBmaWxlcwogICAgbWFrZUdFVFJlcXVlc3QgKHVybCkgewogICAgICByZXR1cm4gZmV0Y2godXJsKQogICAgICAgIC50aGVuKChkYXRhKSA9PiB7CiAgICAgICAgICByZXR1cm4gZGF0YS5qc29uKCkKICAgICAgICB9KQogICAgfSwKICAgIG1ha2VQT1NUUmVxdWVzdCAodXJsLCBkYXRhKSB7CiAgICAgIHJldHVybiBmZXRjaCh1cmwsIHsKICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCiAgICAgICAgfSwKICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKQogICAgICB9KQogICAgICAgIC50aGVuKChkYXRhKSA9PiB7CiAgICAgICAgICByZXR1cm4gZGF0YS5qc29uKCkKICAgICAgICB9KQogICAgfSwKICAgIC8vCiAgICAvLyBSZXF1ZXN0cyBFTkQKICAgIC8vCiAgICAvLyBNZXRob2RzIHdpdGggcmVxdWVzdCB1c2FnZSBTVEFSVAogICAgLy8KICAgIC8vIGdldFRhc2tMaXN0IG9idGFpbnMgdGhlIGRhdGEKICAgIC8vIGFib3V0IHRhc2tzIHRoYXQgYXJlIGFscmVhZHkgcmVnaXN0ZXJlZAogICAgLy8gb24gYmFjay1lbmQgYW5kIGFzc2lnbnMgaXQgdG8KICAgIC8vIHRhc2tMaXN0IGFuZCBvcmlnaW5hbExpc3QgdmFyaWFibGVzIG9uIEZyb250LWVuZAogICAgZ2V0VGFza0xpc3QgKCkgewogICAgICB0aGlzLm1ha2VHRVRSZXF1ZXN0KGAke3RoaXMuQVBJX1VSTH0vdGFza0xpc3RgKQogICAgICAgIC50aGVuKChkYXRhKSA9PiB7CiAgICAgICAgICB0aGlzLnRhc2tMaXN0ID0gZGF0YQogICAgICAgICAgdGhpcy5vcmlnaW5hbExpc3QgPSBkYXRhCiAgICAgICAgfSkKICAgIH0sCiAgICAvLyBjcmVhdGVUYXNrIHNlbmRzIGEgUE9TVCByZXF1ZXN0CiAgICAvLyB3aGljaCBpbnN0cnVjdHMgdGhlIGJhY2stZW5kIGxvY2FsaG9zdCBzZXJ2ZXIKICAgIC8vIHRvIHJlZ2lzdGVyIHRoZSB0YXNrIG9yIHNlbmQgYSBub3RpZmljYXRpb24gaWYgbmVlZGVkCiAgICBjcmVhdGVUYXNrICh0YXNrLCB0YXNrUHJpb3JpdHkpIHsKICAgICAgaWYgKHRhc2subGVuZ3RoKSB7CiAgICAgICAgdGhpcy5tYWtlUE9TVFJlcXVlc3QoYCR7dGhpcy5BUElfVVJMfS9hZGRUYXNrYCwgeyB0ZXh0OiB0YXNrLCBudW1iZXI6IHRoaXMudGFza0xpc3QubGVuZ3RoICsgMSwgc2VsZWN0aW9uU3RhdGU6IGZhbHNlLCBjb21wbGV0aW9uU3RhdGU6IGZhbHNlLCBwaW5TdGF0ZTogZmFsc2UsIHByaW9yaXR5OiB0YXNrUHJpb3JpdHkgfSkKICAgICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgICAgdGhpcy5nZXRUYXNrTGlzdCgpCiAgICAgICAgICB9KQogICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbnMgPSBbJzo6QWRkZWQgdGFzazo6JywgYCcke3Rhc2t9J2BdCiAgICAgICAgaWYgKHRhc2tQcmlvcml0eSA9PT0gMCkgewogICAgICAgICAgbm90aWZpY2F0aW9ucy5wdXNoKCdOb25lJykKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbm90aWZpY2F0aW9ucy5wdXNoKHRhc2tQcmlvcml0eSkKICAgICAgICB9CiAgICAgICAgY29uc3QgY2xhc3NlcyA9IFsnY29uc29sZS1yZXNvbHZlLWhlYWRlcicsICdjb25zb2xlLXJlc29sdmUtY29udGVudCcsICdjb25zb2xlLXJlc29sdmUtcHJpb3JpdHknXQogICAgICAgIHRoaXMuY3JlYXRlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbnMsIGNsYXNzZXMpCiAgICAgICAgdGhpcy51bmlxdWVUYXNrcysrCiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jcmVhdGVOb3RpZmljYXRpb24oWydOb3QgdmFsaWQgdmFsdWUgZW50ZXJlZCddLCBbJ2NvbnNvbGUtZXJyb3ItY29udGVudCddKQogICAgICB9CiAgICB9LAogICAgLy8gcmVtb3ZlVGFzayBzZW5kcyBhIFBPU1QgcmVxdWVzdHMKICAgIC8vIGFuZCBpbnN0cnVjdHMgdGhlIGJhY2stZW5kIHRvIHJlbW92ZSBhIHNwZWNpZmljIHRhc2sKICAgIHJlbW92ZVRhc2sgKHRhc2spIHsKICAgICAgdGhpcy5tYWtlUE9TVFJlcXVlc3QoYCR7dGhpcy5BUElfVVJMfS9yZW1vdmVUYXNrYCwgdGFzaykKICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICB0aGlzLmdldFRhc2tMaXN0KCkKICAgICAgICB9KQogICAgfSwKICAgIC8vIGNsZWFyVGFza0xpc3Qgc2ltcGx5IHJlbW92ZXMgYWxsIHRhc2tzIHZpYSBhIFBPU1QgcmVxdWVzdAogICAgY2xlYXJUYXNrTGlzdCAoY2IpIHsKICAgICAgdGhpcy5tYWtlUE9TVFJlcXVlc3QoYCR7dGhpcy5BUElfVVJMfS9yZW1vdmVBbGxUYXNrc2ApCiAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgdGhpcy5nZXRUYXNrTGlzdCgpCiAgICAgICAgfSkKICAgICAgY2IoKQogICAgfSwKICAgIC8vIHJlc2V0VE9ETyByZXNldHMgdGhlIGFwcCB0byBpdHMgb3JpZ2luYWwgc2V0dGluZ3MgKHRhc2tMaXN0ID0gW10sIGluZGV4ID0gbnVsbCkKICAgIHJlc2V0VE9ETyAoY2IpIHsKICAgICAgdGhpcy5tYWtlUE9TVFJlcXVlc3QoYCR7dGhpcy5BUElfVVJMfS9SZXNldFRPRE9BcHBgKQogICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgIHRoaXMuZ2V0VGFza0xpc3QoKQogICAgICAgIH0pCiAgICAgIGNiKCkKICAgIH0sCiAgICAvLyByZW1vdmVDb21wbGV0ZWRUYXNrcyBzZW5kcyBhIFBPU1QgcmVxdWVzdAogICAgLy8gd2hpY2ggaW5zdHJ1Y3RzIHRvIHJlbW92ZSBhbGwgdGFza3Mgd2l0aCBjb21wbGV0aW9uU3RhdGUgPT09IHRydWUKICAgIC8vIHRoZSBzdGF0ZSBpcyBiZWluZyBjaGVja2VkIG9uIHRoZSBiYWNrLWVuZAogICAgcmVtb3ZlQ29tcGxldGVkVGFza3MgKGNiKSB7CiAgICAgIHRoaXMubWFrZVBPU1RSZXF1ZXN0KGAke3RoaXMuQVBJX1VSTH0vcmVtb3ZlQ29tcGxldGVkVGFza3NgKQogICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgIHRoaXMuZ2V0VGFza0xpc3QoKQogICAgICAgIH0pCiAgICAgIGNiKCkKICAgIH0sCiAgICAvLyByZW1vdmVTZWxlY3RlZFRhc2tzIHdvcmtzIHRoZSBzYW1lIHdheSBhcyByZW1vdmVDb21wbGV0ZWRUYXNrcwogICAgLy8gYnV0IHRoZSBzZWxlY3Rpb25TdGF0ZSBpcyBjaGVja2VkIG9uIGZyb250LWVuZAogICAgLy8gYXMgaXQgc2hvdWxkbid0IGJlIGtub3duIG9uIGJhY2stZW5kCiAgICByZW1vdmVTZWxlY3RlZFRhc2tzIChjYikgewogICAgICB0aGlzLm1ha2VQT1NUUmVxdWVzdChgJHt0aGlzLkFQSV9VUkx9L3JlbW92ZVNlbGVjdGVkVGFza3NgLCB0aGlzLmdldFNlbGVjdGVkVGFza3NJRHMoKSkKICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICB0aGlzLmdldFRhc2tMaXN0KCkKICAgICAgICB9KQogICAgICBjYigpCiAgICB9LAogICAgLy8gdG9nZ2xlQ29tcGxldGlvblN0YXRlIGNoYW5nZXMgdGhlIGNvbXBsZXRpb25TdGF0ZSBvbiBiYWNrLWVuZAogICAgdG9nZ2xlQ29tcGxldGlvblN0YXRlICh0YXNrKSB7CiAgICAgIHRoaXMubWFrZVBPU1RSZXF1ZXN0KGAke3RoaXMuQVBJX1VSTH0vdG9nZ2xlQ29tcGxldGlvbmAsIHRhc2spCiAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgdGhpcy5nZXRUYXNrTGlzdCgpCiAgICAgICAgfSkKICAgIH0sCiAgICB0b2dnbGVQaW5TdGF0ZSAodGFzaykgewogICAgICB0aGlzLm1ha2VQT1NUUmVxdWVzdChgJHt0aGlzLkFQSV9VUkx9L3RvZ2dsZVBpbmAsIHRhc2spCiAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgdGhpcy5nZXRUYXNrTGlzdCgpCiAgICAgICAgfSkKICAgIH0sCiAgICAvLwogICAgLy8gTWV0aG9kcyB3aXRoIHJlcXVlc3QgdXNhZ2UgRU5ECiAgICAvLwogICAgLy8gZ2V0U2VsZWN0ZWRUYXNrc0lEcyBjb2xsZWN0cyB0aGUgZGF0YSBhYm91dCBzZWxlY3Rpb25TdGF0ZXMKICAgIC8vIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRhc2tzCiAgICBnZXRTZWxlY3RlZFRhc2tzSURzICgpIHsKICAgICAgY29uc3Qgc2VsZWN0ZWRUYXNrc0lEcyA9IFtdCiAgICAgIHRoaXMudGFza0xpc3QuZm9yRWFjaCh0YXNrID0+IHsKICAgICAgICBpZiAodGFzay5zZWxlY3Rpb25TdGF0ZSkgewogICAgICAgICAgc2VsZWN0ZWRUYXNrc0lEcy5wdXNoKHRhc2suaWQpCiAgICAgICAgfQogICAgICB9KQogICAgICByZXR1cm4gc2VsZWN0ZWRUYXNrc0lEcwogICAgfSwKICAgIC8vIGZpbHRlckxpc3QgZmlsdGVycyB0aGUgbGlzdCBvZiB0YXNrcyBvbiBmcm9udC1lbmQKICAgIGZpbHRlckxpc3QgKG9wdGlvbikgewogICAgICBpZiAob3B0aW9uID09PSAnQWxsJykgewogICAgICAgIHRoaXMuZ2V0VGFza0xpc3QoKQogICAgICB9IGVsc2UgaWYgKG9wdGlvbiA9PT0gJ0NvbXBsZXRlZCcpIHsKICAgICAgICB0aGlzLnRhc2tMaXN0ID0gdGhpcy5vcmlnaW5hbExpc3QuZmlsdGVyKHRhc2sgPT4gdGFzay5jb21wbGV0aW9uU3RhdGUpCiAgICAgIH0gZWxzZSBpZiAob3B0aW9uID09PSAnV2l0aG91dCBQcmlvcml0eScpIHsKICAgICAgICB0aGlzLnRhc2tMaXN0ID0gdGhpcy5vcmlnaW5hbExpc3QuZmlsdGVyKHRhc2sgPT4gdGFzay5wcmlvcml0eSA9PT0gMCkKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnRhc2tMaXN0ID0gdGhpcy5vcmlnaW5hbExpc3QuZmlsdGVyKHRhc2sgPT4gdGFzay5wcmlvcml0eSA9PT0gb3B0aW9uKQogICAgICB9CiAgICB9LAogICAgLy8gc29ydExpc3Qgc29ydHMgdGhlIGxpc3Qgb2YgdGFza3Mgb24gZnJvbnQtZW5kCiAgICBzb3J0TGlzdCAob3B0aW9uKSB7CiAgICAgIGNvbnN0IHByaW9yaXRpZXNBcnJheSA9IFsnSGlnaCcsICdOb3JtYWwnLCAnTG93JywgMF0KICAgICAgdGhpcy50YXNrTGlzdCA9IFtdCiAgICAgIGlmIChvcHRpb24gPT09ICdEZWZhdWx0JykgewogICAgICAgIHRoaXMuZ2V0VGFza0xpc3QoKQogICAgICB9IGVsc2UgaWYgKG9wdGlvbiA9PT0gJ0hpZ2hMb3cnKSB7CiAgICAgICAgZm9yIChsZXQgcHJpb3JpdHkgPSAwOyBwcmlvcml0eSA8PSBwcmlvcml0aWVzQXJyYXkubGVuZ3RoOyBwcmlvcml0eSsrKSB7CiAgICAgICAgICB0aGlzLm9yaWdpbmFsTGlzdC5mb3JFYWNoKHRhc2sgPT4gewogICAgICAgICAgICBpZiAodGFzay5wcmlvcml0eSA9PT0gcHJpb3JpdGllc0FycmF5W3ByaW9yaXR5XSkgewogICAgICAgICAgICAgIHRoaXMudGFza0xpc3QucHVzaCh0YXNrKQogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBmb3IgKGxldCBwcmlvcml0eSA9IHByaW9yaXRpZXNBcnJheS5sZW5ndGggLSAxOyBwcmlvcml0eSA+PSAwOyBwcmlvcml0eS0tKSB7CiAgICAgICAgICB0aGlzLm9yaWdpbmFsTGlzdC5mb3JFYWNoKHRhc2sgPT4gewogICAgICAgICAgICBpZiAodGFzay5wcmlvcml0eSA9PT0gcHJpb3JpdGllc0FycmF5W3ByaW9yaXR5XSkgewogICAgICAgICAgICAgIHRoaXMudGFza0xpc3QucHVzaCh0YXNrKQogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIC8vIGluaXRDb25zb2xlIGNyZWF0ZXMgbGF1bmNoaW5nIGNvbmRpdGlvbnMKICAgIC8vIGZvciB0aGUgY29uc29sZSBjb21wb25lbnQgKGNvbnNvbGVJbmRleCBpcyB1c2VkIGFzIGEga2V5KQogICAgaW5pdENvbnNvbGUgKCkgewogICAgICB0aGlzLmNvbnNvbGVJbmRleCA9IDAKICAgIH0sCiAgICAvLyBpbiBjcmVhdGVOb3RpZmljYXRpb24sIHRoZSB0ZXh0IHBhcmFtZXRlcgogICAgLy8gaXMgYW4gYXJyYXkgY29udGFpbmluZyBhIHN0cmluZyBvciBhIHNlcmllcyBvZiBzdHJpbmdzCiAgICAvLyBhcyBzb29uIGFzIGEgbm90aWZpY2F0aW9uIG1heSByZXF1aXJlIHNldmVyYWwgbGluZXMgb2YgbWVzc2FnZXMKICAgIC8vIHRoZSB0ZXh0Q2xhc3MgaXMgbmVlZGVkIGZvciBzdHlsaW5nIG9mIGRpZmZlcmVudCB0eXBlcyBvZiBub3RpZmljYXRpb25zCiAgICAvLyBmb3IgZXhhbXBsZSBhbiBlcnJvciBtZXNzYWdlIGlzIHJlZC1jb2xvcmVkLCB3aGlsZSBhIHRhc2sgY3JlYXRpb24KICAgIC8vIG5vdGlmaWNhdGlvbiBmZWF0dXJlcyBzZXZlcmFsIGNvbG9ycyBhbmQgc3R5bGVzCiAgICBjcmVhdGVOb3RpZmljYXRpb24gKHRleHQsIHRleHRDbGFzcykgewogICAgICBjb25zdCBjb250ZW50ID0gW10KICAgICAgZm9yIChsZXQgZWxlbWVudCA9IDA7IGVsZW1lbnQgPCB0ZXh0Lmxlbmd0aDsgZWxlbWVudCsrKSB7CiAgICAgICAgY29udGVudC5wdXNoKHsKICAgICAgICAgIHRleHQ6IHRleHRbZWxlbWVudF0sCiAgICAgICAgICB0ZXh0Q2xhc3M6IHRleHRDbGFzc1tlbGVtZW50XQogICAgICAgIH0pCiAgICAgIH0KICAgICAgaWYgKHRoaXMuY29uc29sZUluZGV4ID09PSBudWxsKSB7CiAgICAgICAgdGhpcy5pbml0Q29uc29sZSgpCiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jb25zb2xlSW5kZXgrKwogICAgICB9CiAgICAgIHRoaXMuY29uc29sZS51bnNoaWZ0KHsKICAgICAgICBjb250ZW50OiBjb250ZW50LAogICAgICAgIG51bWJlcjogdGhpcy5jb25zb2xlSW5kZXgKICAgICAgfSkKICAgIH0KICB9Cn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappingsfile":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"wrapper\">\n      <Console :taskIndex=\"uniqueTasks\" :console=\"console\" />\n      <Todo :console=\"console\" :taskList=\"taskList\" :createTask=\"createTask\" @remove-task=\"removeTask\" :toggleCompletionState=\"toggleCompletionState\" :togglePinState=\"togglePinState\" />\n      <TodoUI @clear-task-list=\"clearTaskList\" @reset-TODO=\"resetTODO\" @remove-completed-tasks=\"removeCompletedTasks\" @remove-selected-tasks=\"removeSelectedTasks\" @filter-list=\"filterList\" @sort-list=\"sortList\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Console from '@/components/Console'\nimport TodoUI from '@/components/TodoUI'\nimport Todo from '@/components/Todo'\nexport default {\n  components: {\n    Console,\n    TodoUI,\n    Todo\n  },\n  data: () => ({\n    taskList: [],\n    originalList: [],\n    console: [],\n    consoleIndex: null,\n    uniqueTasks: 0,\n    API_URL: 'http://localhost:3000'\n  }),\n  mounted () {\n    this.getTaskList()\n  },\n  methods: {\n    //\n    // Requests START\n    //\n    // GET and POST requests\n    // that are responsible for the communication\n    // between Front and Back-end\n    // in particular, the todo-api/database/taskList.json and taskListSetup.json files\n    makeGETRequest (url) {\n      return fetch(url)\n        .then((data) => {\n          return data.json()\n        })\n    },\n    makePOSTRequest (url, data) {\n      return fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      })\n        .then((data) => {\n          return data.json()\n        })\n    },\n    //\n    // Requests END\n    //\n    // Methods with request usage START\n    //\n    // getTaskList obtains the data\n    // about tasks that are already registered\n    // on back-end and assigns it to\n    // taskList and originalList variables on Front-end\n    getTaskList () {\n      this.makeGETRequest(`${this.API_URL}/taskList`)\n        .then((data) => {\n          this.taskList = data\n          this.originalList = data\n        })\n    },\n    // createTask sends a POST request\n    // which instructs the back-end localhost server\n    // to register the task or send a notification if needed\n    createTask (task, taskPriority) {\n      if (task.length) {\n        this.makePOSTRequest(`${this.API_URL}/addTask`, { text: task, number: this.taskList.length + 1, selectionState: false, completionState: false, pinState: false, priority: taskPriority })\n          .then(() => {\n            this.getTaskList()\n          })\n        const notifications = ['::Added task::', `'${task}'`]\n        if (taskPriority === 0) {\n          notifications.push('None')\n        } else {\n          notifications.push(taskPriority)\n        }\n        const classes = ['console-resolve-header', 'console-resolve-content', 'console-resolve-priority']\n        this.createNotification(notifications, classes)\n        this.uniqueTasks++\n      } else {\n        this.createNotification(['Not valid value entered'], ['console-error-content'])\n      }\n    },\n    // removeTask sends a POST requests\n    // and instructs the back-end to remove a specific task\n    removeTask (task) {\n      this.makePOSTRequest(`${this.API_URL}/removeTask`, task)\n        .then(() => {\n          this.getTaskList()\n        })\n    },\n    // clearTaskList simply removes all tasks via a POST request\n    clearTaskList (cb) {\n      this.makePOSTRequest(`${this.API_URL}/removeAllTasks`)\n        .then(() => {\n          this.getTaskList()\n        })\n      cb()\n    },\n    // resetTODO resets the app to its original settings (taskList = [], index = null)\n    resetTODO (cb) {\n      this.makePOSTRequest(`${this.API_URL}/ResetTODOApp`)\n        .then(() => {\n          this.getTaskList()\n        })\n      cb()\n    },\n    // removeCompletedTasks sends a POST request\n    // which instructs to remove all tasks with completionState === true\n    // the state is being checked on the back-end\n    removeCompletedTasks (cb) {\n      this.makePOSTRequest(`${this.API_URL}/removeCompletedTasks`)\n        .then(() => {\n          this.getTaskList()\n        })\n      cb()\n    },\n    // removeSelectedTasks works the same way as removeCompletedTasks\n    // but the selectionState is checked on front-end\n    // as it shouldn't be known on back-end\n    removeSelectedTasks (cb) {\n      this.makePOSTRequest(`${this.API_URL}/removeSelectedTasks`, this.getSelectedTasksIDs())\n        .then(() => {\n          this.getTaskList()\n        })\n      cb()\n    },\n    // toggleCompletionState changes the completionState on back-end\n    toggleCompletionState (task) {\n      this.makePOSTRequest(`${this.API_URL}/toggleCompletion`, task)\n        .then(() => {\n          this.getTaskList()\n        })\n    },\n    togglePinState (task) {\n      this.makePOSTRequest(`${this.API_URL}/togglePin`, task)\n        .then(() => {\n          this.getTaskList()\n        })\n    },\n    //\n    // Methods with request usage END\n    //\n    // getSelectedTasksIDs collects the data about selectionStates\n    // and returns an array of tasks\n    getSelectedTasksIDs () {\n      const selectedTasksIDs = []\n      this.taskList.forEach(task => {\n        if (task.selectionState) {\n          selectedTasksIDs.push(task.id)\n        }\n      })\n      return selectedTasksIDs\n    },\n    // filterList filters the list of tasks on front-end\n    filterList (option) {\n      if (option === 'All') {\n        this.getTaskList()\n      } else if (option === 'Completed') {\n        this.taskList = this.originalList.filter(task => task.completionState)\n      } else if (option === 'Without Priority') {\n        this.taskList = this.originalList.filter(task => task.priority === 0)\n      } else {\n        this.taskList = this.originalList.filter(task => task.priority === option)\n      }\n    },\n    // sortList sorts the list of tasks on front-end\n    sortList (option) {\n      const prioritiesArray = ['High', 'Normal', 'Low', 0]\n      this.taskList = []\n      if (option === 'Default') {\n        this.getTaskList()\n      } else if (option === 'HighLow') {\n        for (let priority = 0; priority <= prioritiesArray.length; priority++) {\n          this.originalList.forEach(task => {\n            if (task.priority === prioritiesArray[priority]) {\n              this.taskList.push(task)\n            }\n          })\n        }\n      } else {\n        for (let priority = prioritiesArray.length - 1; priority >= 0; priority--) {\n          this.originalList.forEach(task => {\n            if (task.priority === prioritiesArray[priority]) {\n              this.taskList.push(task)\n            }\n          })\n        }\n      }\n    },\n    // initConsole creates launching conditions\n    // for the console component (consoleIndex is used as a key)\n    initConsole () {\n      this.consoleIndex = 0\n    },\n    // in createNotification, the text parameter\n    // is an array containing a string or a series of strings\n    // as soon as a notification may require several lines of messages\n    // the textClass is needed for styling of different types of notifications\n    // for example an error message is red-colored, while a task creation\n    // notification features several colors and styles\n    createNotification (text, textClass) {\n      const content = []\n      for (let element = 0; element < text.length; element++) {\n        content.push({\n          text: text[element],\n          textClass: textClass[element]\n        })\n      }\n      if (this.consoleIndex === null) {\n        this.initConsole()\n      } else {\n        this.consoleIndex++\n      }\n      this.console.unshift({\n        content: content,\n        number: this.consoleIndex\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import url('https://fonts.googleapis.com/css2?family=Inconsolata:wght@200;300;400;500;600;700;800;900&display=swap');\n@import 'assets/_variables.scss';\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: 'Inconsolata', monospace;\n  background-color: #000000;\n}\n\n#app {\n  position: relative;\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n}\n\n.wrapper {\n  width: 1140px;\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  padding: 20px 0;\n}\n\n</style>\n"]}]}