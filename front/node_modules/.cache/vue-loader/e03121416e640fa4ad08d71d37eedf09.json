{"remainingRequest":"C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\src\\App.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\src\\App.vue","mtime":1627331994771},{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\projects\\todo_app\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1JbmNvbnNvbGF0YTp3Z2h0QDIwMDszMDA7NDAwOzUwMDs2MDA7NzAwOzgwMDs5MDAmZGlzcGxheT1zd2FwJyk7CkBpbXBvcnQgJ2Fzc2V0cy9fdmFyaWFibGVzLnNjc3MnOwoqIHsKICBwYWRkaW5nOiAwOwogIG1hcmdpbjogMDsKICBib3gtc2l6aW5nOiBib3JkZXItYm94Owp9Cgpib2R5IHsKICBmb250LWZhbWlseTogJ0luY29uc29sYXRhJywgbW9ub3NwYWNlOwogIGJhY2tncm91bmQtY29sb3I6ICMwMDAwMDA7Cn0KCiNhcHAgewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBtaW4taGVpZ2h0OiAxMDB2aDsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwp9Cgoud3JhcHBlciB7CiAgd2lkdGg6IDExNDBweDsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgcGFkZGluZzogMjBweCAwOwp9Cgo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4OA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"wrapper\">\n      <Console :taskIndex=\"uniqueTasks\" :console=\"console\" />\n      <Todo :console=\"console\" :taskList=\"taskList\" :createTask=\"createTask\" @remove-task=\"removeTask\" :toggleCompletionState=\"toggleCompletionState\" :togglePinState=\"togglePinState\" />\n      <TodoUI @clear-task-list=\"clearTaskList\" @reset-TODO=\"resetTODO\" @remove-completed-tasks=\"removeCompletedTasks\" @remove-selected-tasks=\"removeSelectedTasks\" @filter-list=\"filterList\" @sort-list=\"sortList\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Console from '@/components/Console'\nimport TodoUI from '@/components/TodoUI'\nimport Todo from '@/components/Todo'\nexport default {\n  components: {\n    Console,\n    TodoUI,\n    Todo\n  },\n  data: () => ({\n    taskList: [],\n    originalList: [],\n    console: [],\n    consoleIndex: null,\n    uniqueTasks: 0,\n    API_URL: 'http://localhost:3000'\n  }),\n  mounted () {\n    this.getTaskList()\n  },\n  methods: {\n    //\n    // Requests START\n    //\n    // GET and POST requests\n    // that are responsible for the communication\n    // between Front and Back-end\n    // in particular, the todo-api/database/taskList.json and taskListSetup.json files\n    makeGETRequest (url) {\n      return fetch(url)\n        .then((data) => {\n          return data.json()\n        })\n    },\n    makePOSTRequest (url, data) {\n      return fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      })\n        .then((data) => {\n          return data.json()\n        })\n    },\n    //\n    // Requests END\n    //\n    // Methods with request usage START\n    //\n    // getTaskList obtains the data\n    // about tasks that are already registered\n    // on back-end and assigns it to\n    // taskList and originalList variables on Front-end\n    getTaskList () {\n      this.makeGETRequest(`${this.API_URL}/taskList`)\n        .then((data) => {\n          this.taskList = data\n          this.originalList = data\n        })\n    },\n    // createTask sends a POST request\n    // which instructs the back-end localhost server\n    // to register the task or send a notification if needed\n    createTask (task, taskPriority) {\n      if (task.length) {\n        this.makePOSTRequest(`${this.API_URL}/addTask`, { text: task, number: this.taskList.length + 1, selectionState: false, completionState: false, pinState: false, priority: taskPriority })\n          .then(() => {\n            this.getTaskList()\n          })\n        const notifications = ['::Added task::', `'${task}'`]\n        if (taskPriority === 0) {\n          notifications.push('None')\n        } else {\n          notifications.push(taskPriority)\n        }\n        const classes = ['console-resolve-header', 'console-resolve-content', 'console-resolve-priority']\n        this.createNotification(notifications, classes)\n        this.uniqueTasks++\n      } else {\n        this.createNotification(['Not valid value entered'], ['console-error-content'])\n      }\n    },\n    // removeTask sends a POST requests\n    // and instructs the back-end to remove a specific task\n    removeTask (task) {\n      this.makePOSTRequest(`${this.API_URL}/removeTask`, task)\n        .then(() => {\n          this.getTaskList()\n        })\n    },\n    // clearTaskList simply removes all tasks via a POST request\n    clearTaskList (cb) {\n      this.makePOSTRequest(`${this.API_URL}/removeAllTasks`)\n        .then(() => {\n          this.getTaskList()\n        })\n      cb()\n    },\n    // resetTODO resets the app to its original settings (taskList = [], index = null)\n    resetTODO (cb) {\n      this.makePOSTRequest(`${this.API_URL}/ResetTODOApp`)\n        .then(() => {\n          this.getTaskList()\n        })\n      cb()\n    },\n    // removeCompletedTasks sends a POST request\n    // which instructs to remove all tasks with completionState === true\n    // the state is being checked on the back-end\n    removeCompletedTasks (cb) {\n      this.makePOSTRequest(`${this.API_URL}/removeCompletedTasks`)\n        .then(() => {\n          this.getTaskList()\n        })\n      cb()\n    },\n    // removeSelectedTasks works the same way as removeCompletedTasks\n    // but the selectionState is checked on front-end\n    // as it shouldn't be known on back-end\n    removeSelectedTasks (cb) {\n      this.makePOSTRequest(`${this.API_URL}/removeSelectedTasks`, this.getSelectedTasksIDs())\n        .then(() => {\n          this.getTaskList()\n        })\n      cb()\n    },\n    // toggleCompletionState changes the completionState on back-end\n    toggleCompletionState (task) {\n      this.makePOSTRequest(`${this.API_URL}/toggleCompletion`, task)\n        .then(() => {\n          this.getTaskList()\n        })\n    },\n    togglePinState (task) {\n      this.makePOSTRequest(`${this.API_URL}/togglePin`, task)\n        .then(() => {\n          this.getTaskList()\n        })\n    },\n    //\n    // Methods with request usage END\n    //\n    // getSelectedTasksIDs collects the data about selectionStates\n    // and returns an array of tasks\n    getSelectedTasksIDs () {\n      const selectedTasksIDs = []\n      this.taskList.forEach(task => {\n        if (task.selectionState) {\n          selectedTasksIDs.push(task.id)\n        }\n      })\n      return selectedTasksIDs\n    },\n    // filterList filters the list of tasks on front-end\n    filterList (option) {\n      if (option === 'All') {\n        this.getTaskList()\n      } else if (option === 'Completed') {\n        this.taskList = this.originalList.filter(task => task.completionState)\n      } else if (option === 'Without Priority') {\n        this.taskList = this.originalList.filter(task => task.priority === 0)\n      } else {\n        this.taskList = this.originalList.filter(task => task.priority === option)\n      }\n    },\n    // sortList sorts the list of tasks on front-end\n    sortList (option) {\n      const prioritiesArray = ['High', 'Normal', 'Low', 0]\n      this.taskList = []\n      if (option === 'Default') {\n        this.getTaskList()\n      } else if (option === 'HighLow') {\n        for (let priority = 0; priority <= prioritiesArray.length; priority++) {\n          this.originalList.forEach(task => {\n            if (task.priority === prioritiesArray[priority]) {\n              this.taskList.push(task)\n            }\n          })\n        }\n      } else {\n        for (let priority = prioritiesArray.length - 1; priority >= 0; priority--) {\n          this.originalList.forEach(task => {\n            if (task.priority === prioritiesArray[priority]) {\n              this.taskList.push(task)\n            }\n          })\n        }\n      }\n    },\n    // initConsole creates launching conditions\n    // for the console component (consoleIndex is used as a key)\n    initConsole () {\n      this.consoleIndex = 0\n    },\n    // in createNotification, the text parameter\n    // is an array containing a string or a series of strings\n    // as soon as a notification may require several lines of messages\n    // the textClass is needed for styling of different types of notifications\n    // for example an error message is red-colored, while a task creation\n    // notification features several colors and styles\n    createNotification (text, textClass) {\n      const content = []\n      for (let element = 0; element < text.length; element++) {\n        content.push({\n          text: text[element],\n          textClass: textClass[element]\n        })\n      }\n      if (this.consoleIndex === null) {\n        this.initConsole()\n      } else {\n        this.consoleIndex++\n      }\n      this.console.unshift({\n        content: content,\n        number: this.consoleIndex\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import url('https://fonts.googleapis.com/css2?family=Inconsolata:wght@200;300;400;500;600;700;800;900&display=swap');\n@import 'assets/_variables.scss';\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: 'Inconsolata', monospace;\n  background-color: #000000;\n}\n\n#app {\n  position: relative;\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n}\n\n.wrapper {\n  width: 1140px;\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  padding: 20px 0;\n}\n\n</style>\n"]}]}