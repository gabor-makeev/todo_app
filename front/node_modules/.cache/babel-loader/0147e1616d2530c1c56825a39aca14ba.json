{"remainingRequest":"C:\\Users\\Gabor Makeyev\\Desktop\\GeekBrains\\Первая четверть. Продвинутый курс Javascript\\geekbrains-js2-eshop-todo\\todo\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Gabor Makeyev\\Desktop\\GeekBrains\\Первая четверть. Продвинутый курс Javascript\\geekbrains-js2-eshop-todo\\todo\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Gabor Makeyev\\Desktop\\GeekBrains\\Первая четверть. Продвинутый курс Javascript\\geekbrains-js2-eshop-todo\\todo\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Gabor Makeyev\\Desktop\\GeekBrains\\Первая четверть. Продвинутый курс Javascript\\geekbrains-js2-eshop-todo\\todo\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\GeekBrains\\Первая четверть. Продвинутый курс Javascript\\geekbrains-js2-eshop-todo\\todo\\src\\App.vue","mtime":1624823885643},{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\GeekBrains\\Первая четверть. Продвинутый курс Javascript\\geekbrains-js2-eshop-todo\\todo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\GeekBrains\\Первая четверть. Продвинутый курс Javascript\\geekbrains-js2-eshop-todo\\todo\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\GeekBrains\\Первая четверть. Продвинутый курс Javascript\\geekbrains-js2-eshop-todo\\todo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Gabor Makeyev\\Desktop\\GeekBrains\\Первая четверть. Продвинутый курс Javascript\\geekbrains-js2-eshop-todo\\todo\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"wrapper\">\n      <Console :taskIndex=\"uniqueTasks\" :console=\"console\" />\n      <Todo :console=\"console\" :taskList=\"taskList\" :createTask=\"createTask\" @remove-task=\"removeTask\" :toggleCompletionState=\"toggleCompletionState\" :togglePinState=\"togglePinState\" />\n      <TodoUI @clear-task-list=\"clearTaskList\" @reset-TODO=\"resetTODO\" @remove-completed-tasks=\"removeCompletedTasks\" @remove-selected-tasks=\"removeSelectedTasks\" @filter-list=\"filterList\" @sort-list=\"sortList\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Console from '@/components/Console'\nimport TodoUI from '@/components/TodoUI'\nimport Todo from '@/components/Todo'\nexport default {\n  components: {\n    Console,\n    TodoUI,\n    Todo\n  },\n  data: () => ({\n    taskList: [],\n    originalList: [],\n    console: [],\n    consoleIndex: null,\n    uniqueTasks: 0,\n    API_URL: 'http://localhost:3000'\n  }),\n  mounted () {\n    this.getTaskList()\n  },\n  methods: {\n    //\n    // Requests START\n    //\n    // GET and POST requests\n    // that are responsible for the communication\n    // between Front and Back-end\n    // in particular, the todo-api/database/taskList.json and taskListSetup.json files\n    makeGETRequest (url) {\n      return fetch(url)\n        .then((data) => {\n          return data.json()\n        })\n    },\n    makePOSTRequest (url, data) {\n      return fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      })\n        .then((data) => {\n          return data.json()\n        })\n    },\n    //\n    // Requests END\n    //\n    // Methods with request usage START\n    //\n    // getTaskList obtains the data\n    // about tasks that are already registered\n    // on back-end and assigns it to\n    // taskList and originalList variables on Front-end\n    getTaskList () {\n      this.makeGETRequest(`${this.API_URL}/taskList`)\n        .then((data) => {\n          this.taskList = data\n          this.originalList = data\n        })\n    },\n    // createTask sends a POST request\n    // which instructs the back-end localhost server\n    // to register the task or send a notification if needed\n    createTask (task, taskPriority) {\n      if (task.length) {\n        this.makePOSTRequest(`${this.API_URL}/addTask`, { text: task, number: this.taskList.length + 1, selectionState: false, completionState: false, pinState: false, priority: taskPriority })\n          .then(() => {\n            this.getTaskList()\n          })\n        const notifications = ['::Added task::', `'${task}'`]\n        if (taskPriority === 0) {\n          notifications.push('None')\n        } else {\n          notifications.push(taskPriority)\n        }\n        const classes = ['console-resolve-header', 'console-resolve-content', 'console-resolve-priority']\n        this.createNotification(notifications, classes)\n        this.uniqueTasks++\n      } else {\n        this.createNotification(['Not valid value entered'], ['console-error-content'])\n      }\n    },\n    // removeTask sends a POST requests\n    // and instructs the back-end to remove a specific task\n    removeTask (task) {\n      this.makePOSTRequest(`${this.API_URL}/removeTask`, task)\n        .then(() => {\n          this.getTaskList()\n        })\n    },\n    // clearTaskList simply removes all tasks via a POST request\n    clearTaskList (cb) {\n      this.makePOSTRequest(`${this.API_URL}/removeAllTasks`)\n        .then(() => {\n          this.getTaskList()\n        })\n      cb()\n    },\n    // resetTODO resets the app to its original settings (taskList = [], index = null)\n    resetTODO (cb) {\n      this.makePOSTRequest(`${this.API_URL}/ResetTODOApp`)\n        .then(() => {\n          this.getTaskList()\n        })\n      cb()\n    },\n    // removeCompletedTasks sends a POST request\n    // which instructs to remove all tasks with completionState === true\n    // the state is being checked on the back-end\n    removeCompletedTasks (cb) {\n      this.makePOSTRequest(`${this.API_URL}/removeCompletedTasks`)\n        .then(() => {\n          this.getTaskList()\n        })\n      cb()\n    },\n    // removeSelectedTasks works the same way as removeCompletedTasks\n    // but the selectionState is checked on front-end\n    // as it shouldn't be known on back-end\n    removeSelectedTasks (cb) {\n      this.makePOSTRequest(`${this.API_URL}/removeSelectedTasks`, this.getSelectedTasksIDs())\n        .then(() => {\n          this.getTaskList()\n        })\n      cb()\n    },\n    // toggleCompletionState changes the completionState on back-end\n    toggleCompletionState (task) {\n      this.makePOSTRequest(`${this.API_URL}/toggleCompletion`, task)\n        .then(() => {\n          this.getTaskList()\n        })\n    },\n    togglePinState (task) {\n      this.makePOSTRequest(`${this.API_URL}/togglePin`, task)\n        .then(() => {\n          this.getTaskList()\n        })\n    },\n    //\n    // Methods with request usage END\n    //\n    // getSelectedTasksIDs collects the data about selectionStates\n    // and returns an array of tasks\n    getSelectedTasksIDs () {\n      const selectedTasksIDs = []\n      this.taskList.forEach(task => {\n        if (task.selectionState) {\n          selectedTasksIDs.push(task.id)\n        }\n      })\n      return selectedTasksIDs\n    },\n    // filterList filters the list of tasks on front-end\n    filterList (option) {\n      if (option === 'All') {\n        this.getTaskList()\n      } else if (option === 'Completed') {\n        this.taskList = this.originalList.filter(task => task.completionState)\n      } else if (option === 'Without Priority') {\n        this.taskList = this.originalList.filter(task => task.priority === 0)\n      } else {\n        this.taskList = this.originalList.filter(task => task.priority === option)\n      }\n    },\n    // sortList sorts the list of tasks on front-end\n    sortList (option) {\n      const prioritiesArray = ['High', 'Normal', 'Low', 0]\n      this.taskList = []\n      if (option === 'Default') {\n        this.getTaskList()\n      } else if (option === 'HighLow') {\n        for (let priority = 0; priority <= prioritiesArray.length; priority++) {\n          this.originalList.forEach(task => {\n            if (task.priority === prioritiesArray[priority]) {\n              this.taskList.push(task)\n            }\n          })\n        }\n      } else {\n        for (let priority = prioritiesArray.length - 1; priority >= 0; priority--) {\n          this.originalList.forEach(task => {\n            if (task.priority === prioritiesArray[priority]) {\n              this.taskList.push(task)\n            }\n          })\n        }\n      }\n    },\n    // initConsole creates launching conditions\n    // for the console component (consoleIndex is used as a key)\n    initConsole () {\n      this.consoleIndex = 0\n    },\n    // in createNotification, the text parameter\n    // is an array containing a string or a series of strings\n    // as soon as a notification may require several lines of messages\n    // the textClass is needed for styling of different types of notifications\n    // for example an error message is red-colored, while a task creation\n    // notification features several colors and styles\n    createNotification (text, textClass) {\n      const content = []\n      for (let element = 0; element < text.length; element++) {\n        content.push({\n          text: text[element],\n          textClass: textClass[element]\n        })\n      }\n      if (this.consoleIndex === null) {\n        this.initConsole()\n      } else {\n        this.consoleIndex++\n      }\n      this.console.unshift({\n        content: content,\n        number: this.consoleIndex\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import url('https://fonts.googleapis.com/css2?family=Inconsolata:wght@200;300;400;500;600;700;800;900&display=swap');\n@import 'assets/_variables.scss';\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: 'Inconsolata', monospace;\n  background-color: #000000;\n}\n\n#app {\n  position: relative;\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n}\n\n.wrapper {\n  width: 1140px;\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  padding: 20px 0;\n}\n\n</style>\n"],"sourceRoot":"src"}]}